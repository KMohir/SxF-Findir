import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import CommandStart
from datetime import datetime
import os
from environs import Env
import gspread
from google.oauth2.service_account import Credentials
import platform
import sqlite3
import psycopg2
from psycopg2 import sql, IntegrityError
import re

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
env = Env()
env.read_env()
API_TOKEN = env.str('BOT_TOKEN')

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    waiting_name = State()
    waiting_phone = State()

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ Kirim/Chiqim
start_kb = InlineKeyboardMarkup(row_width=2)
start_kb.add(
    InlineKeyboardButton('üü¢ Kirim', callback_data='type_kirim'),
    InlineKeyboardButton('üî¥ Chiqim', callback_data='type_chiqim')
)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
categories = [
    ("–ú–∏–∂–æ–∑–ª–∞—Ä–¥–∞–Ω", "cat_mijozlar"),
    ("–ê—Ä–µ–Ω–¥–∞ —Ç–µ—Ö–Ω–∏–∫–∞ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "cat_arenda"),
    ("–ë–µ—Ç–æ–Ω —Ç–∞–π—ë—Ä–ª–∞–± –±–µ—Ä–∏—à", "cat_beton"),
    ("–ì–µ–æ–ª–æ–≥–∏—è –≤–∞ –ª–æ–π–∏—Ö–∞ –∏—à–ª–∞—Ä–∏", "cat_geologiya"),
    ("–ì–µ–æ–ª–æ–≥–∏—è –∏—à–ª–∞—Ä–∏", "cat_geologiya_ish"),
    ("–î–∏–∑ —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏", "cat_diz"),
    ("–î–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", "cat_doroga"),
    ("–ó–∞–ø—Ä–∞–≤–∫–∞", "cat_zapravka"),
    ("–ö–æ–º–º—É–Ω–∞–ª –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "cat_kommunal"),
    ("–ö—É–Ω–ª–∏–∫ –∏—à—á–∏", "cat_kunlik"),
    ("–û–±—ä–µ–º —É—Å—Ç–∞–ª–∞—Ä", "cat_ustalar"),
    ("–ü–µ—Ä–µ–≤–æ–¥", "cat_perevod"),
    ("–û–π–ª–∏–∫ –∏—à—á–∏–ª–∞—Ä", "cat_oylik"),
    ("–û–ª–∏–± —á–∏–∫–∏–± –∫–µ—Ç–∏–ª–≥–∞–Ω –º—É—Å–æ—Ä", "cat_musor"),
    ("–ü–µ—Ä–µ—á–µ—Å–ª–µ–Ω–∏—è –†–∞—Å—Ö–æ–¥", "cat_perechisleniya"),
    ("–ü–∏—Ç–∞–Ω–∏–µ", "cat_pitanie"),
    ("–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã", "cat_prochie"),
    ("–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∑–∞–ø—á–∞—Å—Ç–∏", "cat_remont"),
    ("–°–æ—Ç–∏–± –æ–ª–∏–Ω–≥–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª", "cat_material"),
    ("–ö–∞—Ä–∑", "cat_qarz"),
    ("–°–æ—Ç–∏–± –æ–ª–∏–Ω–≥–∞–Ω —Å–Ω–æ—Å —É–π–ª–∞—Ä", "cat_snos"),
    ("–í–∞–ª—é—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è", "cat_valyuta"),
    ("–•–∏–∑–º–∞—Ç (–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã)", "cat_xizmat"),
    ("–•–æ–∑ —Ç–æ–≤–∞—Ä—ã –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", "cat_xoz"),
    ("SXF Kapital", "cat_sxf"),
    ("–•–æ–∂–∏ –ê–∫–∞", "cat_xoji"),
    ("–≠—Ö—Å–æ–Ω", "cat_exson"),
    ("–•–æ–º–∏–π–ª–∏–∫", "cat_xomiy")
]

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: –∫–∞—Ç–µ–≥–æ—Ä–∏—è -> —ç–º–æ–¥–∑–∏ (—Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
category_emojis = {
    "–ú–∏–∂–æ–∑–ª–∞—Ä–¥–∞–Ω": "",
    "–ê—Ä–µ–Ω–¥–∞ —Ç–µ—Ö–Ω–∏–∫–∞ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": "",
    "–ë–µ—Ç–æ–Ω —Ç–∞–π—ë—Ä–ª–∞–± –±–µ—Ä–∏—à": "",
    "–ì–µ–æ–ª–æ–≥–∏—è –≤–∞ –ª–æ–π–∏—Ö–∞ –∏—à–ª–∞—Ä–∏": "",
    "–ì–µ–æ–ª–æ–≥–∏—è –∏—à–ª–∞—Ä–∏": "",
    "–î–∏–∑ —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏": "",
    "–î–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã": "",
    "–ó–∞–ø—Ä–∞–≤–∫–∞": "",
    "–ö–æ–º–º—É–Ω–∞–ª –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç": "",
    "–ö—É–Ω–ª–∏–∫ –∏—à—á–∏": "",
    "–û–±—ä–µ–º —É—Å—Ç–∞–ª–∞—Ä": "",
    "–ü–µ—Ä–µ–≤–æ–¥": "",
    "–û–π–ª–∏–∫ –∏—à—á–∏–ª–∞—Ä": "",
    "–û–ª–∏–± —á–∏–∫–∏–± –∫–µ—Ç–∏–ª–≥–∞–Ω –º—É—Å–æ—Ä": "",
    "–ü–µ—Ä–µ—á–µ—Å–ª–µ–Ω–∏—è –†–∞—Å—Ö–æ–¥": "",
    "–ü–∏—Ç–∞–Ω–∏–µ": "",
    "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã": "",
    "–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∑–∞–ø—á–∞—Å—Ç–∏": "",
    "–°–æ—Ç–∏–± –æ–ª–∏–Ω–≥–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª": "",
    "–ö–∞—Ä–∑": "",
    "–°–æ—Ç–∏–± –æ–ª–∏–Ω–≥–∞–Ω —Å–Ω–æ—Å —É–π–ª–∞—Ä": "",
    "–í–∞–ª—é—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è": "",
    "–•–∏–∑–º–∞—Ç (–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã)": "",
    "–•–æ–∑ —Ç–æ–≤–∞—Ä—ã –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å": "",
    "SXF Kapital": "",
    "–•–æ–∂–∏ –ê–∫–∞": "",
    "–≠—Ö—Å–æ–Ω": "",
    "–•–æ–º–∏–π–ª–∏–∫": ""
}

def get_category_with_emoji(category_name):
    emoji = category_emojis.get(category_name, "")
    return f"{emoji} {category_name}".strip()

def get_categories_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    for name in get_categories():
        cb = f"cat_{name}"
        # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ —ç–º–æ–¥–∑–∏
        kb.add(InlineKeyboardButton(name, callback_data=cb))
    return kb

# –¢–∏–ø –æ–ø–ª–∞—Ç—ã
pay_types = [
    ("Plastik", "pay_plastik"),
    ("Naxt", "pay_naxt"),
    ("Perevod", "pay_perevod"),
    ("Bank", "pay_bank")
]

def get_pay_types_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    for name in get_pay_types():
        cb = f"pay_{name}"
        kb.add(InlineKeyboardButton(name, callback_data=cb))
    return kb

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è Izoh
skip_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment"))

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm_kb = InlineKeyboardMarkup(row_width=2)
confirm_kb.add(
    InlineKeyboardButton('‚úÖ Ha', callback_data='confirm_yes'),
    InlineKeyboardButton('‚ùå Yoq', callback_data='confirm_no')
)

# --- Google Sheets settings ---
SHEET_ID = '10KP00nakL0LK9lyB7jQrfUtmtIQO6gzqJDP0rogTEww'
SHEET_NAME = 'Dashboard1'
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
CREDENTIALS_FILE = 'credentials.json'

def clean_emoji(text):
    # –£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏/—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏, –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç
    return re.sub(r'^[^\w\s]+', '', text).strip()

def check_user_access(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –±–æ—Ç—É"""
    try:
        conn = get_db_conn()
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º
        if user_id in ADMINS:
            return True, "admin"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        c.execute("SELECT status FROM users WHERE user_id = %s", (user_id,))
        result = c.fetchone()
        
        if result:
            status = result[0]
            if status == 'approved':
                return True, "approved"
            else:
                return False, f"blocked ({status})"
        else:
            return False, "not_registered"
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False, "error"
    finally:
        if 'conn' in locals():
            conn.close()


def add_to_google_sheet(data):
    print("üö®üö®üö® –§–£–ù–ö–¶–ò–Ø add_to_google_sheet –í–´–ó–í–ê–ù–ê! üö®üö®üö®")
    print(f"üö®üö®üö® –î–∞–Ω–Ω—ã–µ: {data} üö®üö®üö®")
    try:
        creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(SHEET_ID)
        worksheet = sh.worksheet(SHEET_NAME)
        # Jadval ustunlari: Kun, Summa, Nomi, Kirim-Chiqim, To'lov turi, Kategoriyalar, Izoh, Vaqt
        from datetime import datetime
        now = datetime.now()
        # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: 7/30/2025
        if platform.system() == 'Windows':
            date_str = now.strftime('%-m/%-d/%Y')  # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
        else:
            date_str = now.strftime('%-m/%-d/%Y')  # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
        time_str = now.strftime('%H:%M')
        user_name = get_user_name(data.get('user_id', data.get('user_id', '')))
        print(f"DEBUG: user_id = {data.get('user_id')}, user_name = '{user_name}'")
        debug_users_table()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –∑–∞–ø–∏—Å–∞—Ç—å —Å—É–º–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã
        currency = data.get('currency', 'Sum')
        dollar_amount = ''
        sum_amount = ''
        
        if currency == 'Dollar':
            dollar_amount = data.get('amount', '')
        else:
            sum_amount = data.get('amount', '')
        
        row = [
            date_str,      # Kun (A) - –¥–∞—Ç–∞
            time_str,      # Vaqt (B) - –≤—Ä–µ–º—è
            dollar_amount,                    # $ (C) - –¥–æ–ª–ª–∞—Ä—ã
            sum_amount,                       # Summa (D) - —Å—É–º–º—ã
            clean_emoji(data.get('type', '')), # Kirim-Chiqim (E)
            data.get('pay_type', ''),         # To'lov turi (F)
            clean_emoji(data.get('category', '')), # Kotegoriyalar (G)
            '',                               # Loyihalar (H) - –ø—É—Å—Ç–æ
            data.get('comment', ''),          # Izoh (I)
            '',                               # Oylik ko'rsatkich (J) - –ø—É—Å—Ç–æ
            user_name                         # User (K) - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ]
        print(f"DEBUG: Row data: {row}")
        worksheet.append_row(row)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheets")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        try:
            # –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (C1 –∏ D1)
            dollar_balance = worksheet.acell('C1').value or '0'
            sum_balance = worksheet.acell('D1').value or '0'
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏
            balance_text = f"üí∞ <b>–û—Å—Ç–∞—Ç–∫–∏:</b>\n"
            balance_text += f"üíµ <b>–î–æ–ª–ª–∞—Ä—ã:</b> {dollar_balance}\n"
            balance_text += f"üí∏ <b>–°—É–º–º—ã:</b> {sum_balance}"
            
            return balance_text
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        return None

def format_summary(data):
    tur_emoji = 'üü¢' if data.get('type') == 'Kirim' else 'üî¥'
    dt = data.get('dt', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–µ–∑ —ç–º–æ–¥–∑–∏
    category_name = data.get('category', '-')
    currency = data.get('currency', 'Sum')
    currency_symbol = 'üíµ' if currency == 'Dollar' else 'üí∏'
    return (
        f"<b>Natija:</b>\n"
        f"<b>Tur:</b> {tur_emoji} {data.get('type', '-')}\n"
        f"<b>Kotegoriya:</b> {category_name}\n"
        f"<b>Valyuta:</b> {currency_symbol} {currency}\n"
        f"<b>Summa:</b> {data.get('amount', '-')}\n"
        f"<b>To'lov turi:</b> {data.get('pay_type', '-')}\n"
        f"<b>Izoh:</b> {data.get('comment', '-')}\n"
        f"<b>Vaqt:</b> {dt}"
    )

# --- –ê–¥–º–∏–Ω—ã ---
ADMINS = [5657091547, 5048593195]  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å id –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def get_db_conn():
    return psycopg2.connect(
        dbname=env.str('POSTGRES_DB', 'kapital'),
        user=env.str('POSTGRES_USER', 'postgres'),
        password=env.str('POSTGRES_PASSWORD', 'postgres'),
        host=env.str('POSTGRES_HOST', 'localhost'),
        port=env.str('POSTGRES_PORT', '5432')
    )

def init_db():
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        user_id BIGINT UNIQUE,
        name TEXT,
        phone TEXT,
        status TEXT,
        reg_date TEXT
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS pay_types (
        id SERIAL PRIMARY KEY,
        name TEXT UNIQUE
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS categories (
        id SERIAL PRIMARY KEY,
        name TEXT UNIQUE
    )''')
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã
    c.execute('SELECT COUNT(*) FROM pay_types')
    if c.fetchone()[0] == 0:
        for name in ["Plastik", "Naxt", "Perevod", "Bank"]:
            c.execute('INSERT INTO pay_types (name) VALUES (%s)', (name,))
    c.execute('SELECT COUNT(*) FROM categories')
    if c.fetchone()[0] == 0:
        for name in ["–ú–∏–∂–æ–∑–ª–∞—Ä–¥–∞–Ω", "–ê—Ä–µ–Ω–¥–∞ —Ç–µ—Ö–Ω–∏–∫–∞ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "–ë–µ—Ç–æ–Ω —Ç–∞–π—ë—Ä–ª–∞–± –±–µ—Ä–∏—à", "–ì–µ–æ–ª–æ–≥–∏—è –≤–∞ –ª–æ–π–∏—Ö–∞ –∏—à–ª–∞—Ä–∏", "–ì–µ–æ–ª–æ–≥–∏—è –∏—à–ª–∞—Ä–∏", "–î–∏–∑ —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏", "–î–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", "–ó–∞–ø—Ä–∞–≤–∫–∞", "–ö–æ–º–º—É–Ω–∞–ª –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–ö—É–Ω–ª–∏–∫ –∏—à—á–∏", "–û–±—ä–µ–º —É—Å—Ç–∞–ª–∞—Ä", "–ü–µ—Ä–µ–≤–æ–¥", "–û–π–ª–∏–∫ –∏—à—á–∏–ª–∞—Ä", "–û–ª–∏–± —á–∏–∫–∏–± –∫–µ—Ç–∏–ª–≥–∞–Ω –º—É—Å–æ—Ä", "–ü–µ—Ä–µ—á–µ—Å–ª–µ–Ω–∏—è –†–∞—Å—Ö–æ–¥", "–ü–∏—Ç–∞–Ω–∏–µ", "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã", "–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∑–∞–ø—á–∞—Å—Ç–∏", "–°–æ—Ç–∏–± –æ–ª–∏–Ω–≥–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª", "–ö–∞—Ä–∑", "–°–æ—Ç–∏–± –æ–ª–∏–Ω–≥–∞–Ω —Å–Ω–æ—Å —É–π–ª–∞—Ä", "–í–∞–ª—é—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è", "–•–∏–∑–º–∞—Ç (–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã)", "–•–æ–∑ —Ç–æ–≤–∞—Ä—ã –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", "SXF Kapital", "–•–æ–∂–∏ –ê–∫–∞", "–≠—Ö—Å–æ–Ω", "–•–æ–º–∏–π–ª–∏–∫"]:
            c.execute('INSERT INTO categories (name) VALUES (%s)', (name,))
    conn.commit()
    conn.close()

init_db()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_user_status(user_id):
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT status FROM users WHERE user_id=%s', (user_id,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else None

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def register_user(user_id, name, phone):
    from datetime import datetime
    print(f"DEBUG: register_user called with user_id={user_id}, name='{name}', phone='{phone}'")
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('INSERT INTO users (user_id, name, phone, status, reg_date) VALUES (%s, %s, %s, %s, %s) ON CONFLICT (user_id) DO NOTHING',
                  (user_id, name, phone, 'pending', datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        conn.commit()
        print(f"DEBUG: User registered successfully in database")
    except IntegrityError:
        print(f"DEBUG: User already exists in database")
        conn.rollback()
    except Exception as e:
        print(f"DEBUG: Error registering user: {e}")
        conn.rollback()
    conn.close()

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def update_user_status(user_id, status):
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('UPDATE users SET status=%s WHERE user_id=%s', (status, user_id))
    conn.commit()
    conn.close()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def debug_users_table():
    print("DEBUG: Checking users table contents:")
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('SELECT user_id, name, phone, status, reg_date FROM users ORDER BY id DESC LIMIT 5')
        rows = c.fetchall()
        for row in rows:
            print(f"  User: ID={row[0]}, Name='{row[1]}', Phone='{row[2]}', Status='{row[3]}', Date='{row[4]}'")
    except Exception as e:
        print(f"DEBUG: Error reading users table: {e}")
    conn.close()

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Google Sheets ---
def get_user_name(user_id):
    print(f"DEBUG: get_user_name called with user_id = {user_id}")
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT name FROM users WHERE user_id=%s', (user_id,))
    row = c.fetchone()
    conn.close()
    result = row[0] if row else ''
    print(f"DEBUG: get_user_name result = '{result}'")
    return result

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ ---
def get_pay_types():
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT name FROM pay_types')
    result = [row[0] for row in c.fetchall()]
    conn.close()
    return result

def get_categories():
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT name FROM categories')
    result = [row[0] for row in c.fetchall()]
    conn.close()
    return result

# –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π

# –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–∞

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start(msg: types.Message, state: FSMContext):
    await state.finish()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    has_access, access_type = check_user_access(msg.from_user.id)
    
    if not has_access:
        if access_type == "not_registered":
            text = "‚ùå <b>Ruxsat yo'q!</b>\n\n"
            text += "Siz botdan foydalanish uchun ro'yxatdan o'tishingiz kerak.\n"
            text += "Ro'yxatdan o'tish uchun /register ni bosing"
        elif "blocked" in access_type:
            text = "‚ùå <b>Akkauntiz bloklangan!</b>\n\n"
            text += "Sizning akkauntingiz admin tomonidan bloklangan.\n"
            text += "Batafsil ma'lumot uchun admin bilan bog'laning: @usernamti"
        else:
            text = "‚ùå <b>Xatolik!</b>\n\n"
            text += "Tizimda xatolik yuz berdi. Ro'yxatdan o'tish uchun /register ni bosing"
        
        await msg.answer(text)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboard.add(types.KeyboardButton("üìä Barcha ma'lumotlar"))
    
    text = "ü§ñ <b>Botga xush kelibsiz!</b>\n\n"
    text += "Mavjud buyruqlar:\n"
    text += "/all - Barcha ma'lumotlarni ko'rsatish\n"
    text += "/register - Ro'yxatdan o'tish"
    
    await msg.answer(text, reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message_handler(commands=['register'], state='*')
async def register_cmd(msg: types.Message, state: FSMContext):
    await state.finish()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    has_access, access_type = check_user_access(msg.from_user.id)
    
    if has_access:
        await msg.answer("‚úÖ Siz allaqachon ro'yxatdan o'tgansiz!")
        return
    
    if access_type == "not_registered":
        await msg.answer("üìù <b>Ro'yxatdan o'tish</b>\n\n"
                        "Ismingizni yuboring:")
        await Form.waiting_name.set()
    else:
        await msg.answer(f"‚ùå Sizning hisobingiz {access_type} holatida. Admin bilan bog'laning.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message_handler(state=Form.waiting_name)
async def process_register_name(msg: types.Message, state: FSMContext):
    name = msg.text.strip()
    if len(name) < 2:
        await msg.answer("‚ùå Ism juda qisqa! Iltimos, to'liq ismingizni yuboring:")
        return
    
    await state.update_data(name=name)
    await msg.answer("üìû Telefon raqamingizni yuboring:\n\n"
                    "Misol: +998901234567")
    await Form.waiting_phone.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message_handler(state=Form.waiting_phone)
async def process_register_phone(msg: types.Message, state: FSMContext):
    phone = msg.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone.startswith('+') or len(phone) < 10:
        await msg.answer("‚ùå Noto'g'ri telefon raqam! Iltimos, to'g'ri formatda yuboring:\n\n"
                        "Misol: +998901234567")
        return
    
    data = await state.get_data()
    name = data.get('name')
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "pending"
        conn = get_db_conn()
        c = conn.cursor()
        
        c.execute("""
            INSERT INTO users (user_id, name, phone, status, reg_date) 
            VALUES (%s, %s, %s, 'pending', NOW())
            ON CONFLICT (user_id) DO UPDATE SET
            name = EXCLUDED.name,
            phone = EXCLUDED.phone,
            status = 'pending'
        """, (msg.from_user.id, name, phone))
        
        conn.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await notify_admins_new_registration(msg.from_user.id, name, phone)
        
        await msg.answer("‚úÖ <b>Ro'yxatdan o'tish muvaffaqiyatli!</b>\n\n"
                        f"üë§ <b>Ism:</b> {name}\n"
                        f"üìû <b>Telefon:</b> {phone}\n\n"
                        "‚è≥ Admin tasdigini kutishda...\n"
                        "Tasdiqlanganidan so'ng siz botdan foydalanish mumkin bo'ladi.")
        
        await state.finish()
        
    except Exception as e:
        await msg.answer(f"‚ùå Xatolik yuz berdi: {e}")
        await state.finish()
    finally:
        if 'conn' in locals():
            conn.close()

# –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def notify_admins_new_registration(user_id, name, phone):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    text = "üÜï <b>Yangi ro'yxatdan o'tish!</b>\n\n"
    text += f"üë§ <b>Ism:</b> {name}\n"
    text += f"üìû <b>Telefon:</b> {phone}\n"
    text += f"üÜî <b>ID:</b> {user_id}\n\n"
    text += "Tasdiqlash uchun quyidagi tugmalardan foydalaning:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ Tasdiqlash", callback_data=f"approve_{user_id}"),
        InlineKeyboardButton("‚ùå Rad etish", callback_data=f"reject_{user_id}")
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMINS:
        try:
            await bot.send_message(admin_id, text, reply_markup=keyboard)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
@dp.callback_query_handler(lambda c: c.data.startswith('approve_'))
async def approve_user(call: types.CallbackQuery):
    if call.from_user.id not in ADMINS:
        await call.answer("Faqat admin uchun!")
        return
    
    user_id = int(call.data.split('_')[1])
    
    try:
        conn = get_db_conn()
        c = conn.cursor()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "approved"
        c.execute("UPDATE users SET status = 'approved' WHERE user_id = %s", (user_id,))
        conn.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(user_id, "‚úÖ <b>Tabriklaymiz!</b>\n\n"
                                           "Sizning hisobingiz tasdiqlandi!\n"
                                           "Endi siz botdan to'liq foydalanish mumkin.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        await call.message.edit_text(f"‚úÖ Foydalanuvchi tasdiqlandi: {user_id}")
        await call.answer()
        
    except Exception as e:
        await call.answer(f"Xatolik: {e}")
    finally:
        if 'conn' in locals():
            conn.close()

@dp.callback_query_handler(lambda c: c.data.startswith('reject_'))
async def reject_user(call: types.CallbackQuery):
    if call.from_user.id not in ADMINS:
        await call.answer("Faqat admin uchun!")
        return
    
    user_id = int(call.data.split('_')[1])
    
    try:
        conn = get_db_conn()
        c = conn.cursor()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "rejected"
        c.execute("UPDATE users SET status = 'rejected' WHERE user_id = %s", (user_id,))
        conn.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(user_id, "‚ùå <b>Kechirasiz!</b>\n\n"
                                           "Sizning so'rovingiz rad etildi.\n"
                                           "Batafsil ma'lumot uchun admin bilan bog'laning.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        await call.message.edit_text(f"‚ùå Foydalanuvchi rad etildi: {user_id}")
        await call.answer()
        
    except Exception as e:
        await call.answer(f"Xatolik: {e}")
    finally:
        if 'conn' in locals():
            conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message_handler(lambda message: message.text == "üìä Barcha ma'lumotlar", state='*')
async def keyboard_all_cmd(msg: types.Message, state: FSMContext):
    await state.finish()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    has_access, access_type = check_user_access(msg.from_user.id)
    
    if not has_access:
        if access_type == "not_registered":
            text = "‚ùå <b>Ruxsat yo'q!</b>\n\n"
            text += "Siz botdan foydalanish uchun ro'yxatdan o'tishingiz kerak.\n"
            text += "Ro'yxatdan o'tish uchun /register ni bosing"
        elif "blocked" in access_type:
            text = "‚ùå <b>Akkauntiz bloklangan!</b>\n\n"
            text += "Sizning akkauntingiz admin tomonidan bloklangan.\n"
            text += "Batafsil ma'lumot uchun admin bilan bog'laning: @usernamti"
        else:
            text = "‚ùå <b>Xatolik!</b>\n\n"
            text += "Tizimda xatolik yuz berdi. Ro'yxatdan o'tish uchun /register ni bosing"
        
        await msg.answer(text)
        return
    
    try:
        creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(SHEET_ID)
        worksheet = sh.worksheet(SHEET_NAME)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        all_values = worksheet.get_all_values()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ 2-–π —Å—Ç—Ä–æ–∫–∏ (–∏–Ω–¥–µ–∫—Å 1)
        headers = all_values[1] if len(all_values) > 1 else []
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—è —Å 3-–π (–∏–Ω–¥–µ–∫—Å 2)
        data_rows = all_values[2:] if len(all_values) > 2 else []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
        data_rows = [row for row in data_rows if row and row[0]]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "üìä <b>SXF moliyaviy malumot</b>\n\n"
        
        # –°—Ç–æ–ª–±—Ü—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å
        excluded_headers = [
            "Som Kirim",
            "Som chiqim", 
            "Kirim $",
            "Chiqim $",
            "Bank kirim",
            "Bank chiqim"
        ]
        
        for i, row in enumerate(data_rows, 1):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
            text += f"<b>{i}. {row[0] if row[0] else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            for j, cell_value in enumerate(row[1:], 1):  # –Ω–∞—á–∏–Ω–∞—è —Å–æ 2-–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                if cell_value:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                    header = headers[j] if j < len(headers) else f"–°—Ç–æ–ª–±–µ—Ü {j+1}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç —Å—Ç–æ–ª–±–µ—Ü
                    if header not in excluded_headers:
                        text += f"   <b>{header}:</b> {cell_value}\n"
            
            text += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º Umumiy qoldiq
        try:
            # –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —è—á–µ–µ–∫
            d1_value = worksheet.acell('D1').value or '0'
            g1_value = worksheet.acell('G1').value or '0'
            j1_value = worksheet.acell('J1').value or '0'
            m1_value = worksheet.acell('M1').value or '0'
            n1_value = worksheet.acell('N1').value or '0'
            o1_value = worksheet.acell('O1').value or '0'
            
            text += "üí∞ <b>Umumiy qoldiq</b>\n"
            text += f"Ostatka Som : {d1_value}\n"
            text += f"Ostatka $ : {g1_value}\n"
            text += f"Ostatka Bank : {j1_value}\n"
            text += f"Bugungi qarzdorlar : {m1_value}\n"
            text += f"Umumiy Qarzdorlar : {n1_value}\n"
            text += f"Mavjud Obektlar summasi : {o1_value}\n"
            
        except Exception as e:
            text += "‚ùå Umumiy qoldiq ma'lumotlarini olishda xatolik\n"

        await msg.answer(text)
        
    except FileNotFoundError:
        await msg.answer("‚ùå –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
    except Exception as e:
        await msg.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets: {e}")

# –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
@dp.message_handler(commands=['add_tolov'], state='*')
async def add_paytype_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await msg.answer('Yangi To‚Äòlov turi nomini yuboring:')
    await state.set_state('add_paytype')

@dp.message_handler(state='add_paytype', content_types=types.ContentTypes.TEXT)
async def add_paytype_save(msg: types.Message, state: FSMContext):
    name = msg.text.strip()
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('INSERT INTO pay_types (name) VALUES (%s)', (name,))
        conn.commit()
        await msg.answer(f'‚úÖ Yangi To‚Äòlov turi qo‚Äòshildi: {name}')
    except IntegrityError:
        await msg.answer('‚ùóÔ∏è Bu nom allaqachon mavjud.')
        conn.rollback()
    conn.close()
    await state.finish()

@dp.message_handler(commands=['add_category'], state='*')
async def add_category_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await msg.answer('Yangi kategoriya nomini yuboring:')
    await state.set_state('add_category')

def split_emoji_and_text(text):
    match = re.match(r'^([^ -\w\s]+)?\s*(.*)', text)
    if match:
        emoji = match.group(1) or ''
        name = match.group(2)
        return emoji, name
    return '', text

@dp.message_handler(state='add_category', content_types=types.ContentTypes.TEXT)
async def add_category_save(msg: types.Message, state: FSMContext):
    emoji, name = split_emoji_and_text(msg.text.strip())
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('INSERT INTO categories (name, emoji) VALUES (%s, %s)', (name, emoji))
        conn.commit()
        await msg.answer(f'‚úÖ Yangi kategoriya qo‚Äòshildi: {emoji} {name}'.strip())
    except IntegrityError:
        await msg.answer('‚ùóÔ∏è Bu nom allaqachon mavjud.')
        conn.rollback()
    conn.close()
    await state.finish()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ To'lov turi ---
@dp.message_handler(commands=['del_tolov'], state='*')
async def del_tolov_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    kb = InlineKeyboardMarkup(row_width=1)
    for name in get_pay_types():
        kb.add(InlineKeyboardButton(f'‚ùå {name}', callback_data=f'del_tolov_{name}'))
    await msg.answer('O‚Äòchirish uchun To‚Äòlov turini tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('del_tolov_'))
async def del_tolov_cb(call: types.CallbackQuery):
    if call.from_user.id not in ADMINS:
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    name = call.data[len('del_tolov_'):]
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('DELETE FROM pay_types WHERE name=%s', (name,))
    conn.commit()
    conn.close()
    await call.message.edit_text(f'‚ùå To‚Äòlov turi o‚Äòchirildi: {name}')
    await call.answer()

@dp.message_handler(commands=['edit_tolov'], state='*')
async def edit_tolov_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    kb = InlineKeyboardMarkup(row_width=1)
    for name in get_pay_types():
        kb.add(InlineKeyboardButton(f'‚úèÔ∏è {name}', callback_data=f'edit_tolov_{name}'))
    await msg.answer('Tahrirlash uchun To‚Äòlov turini tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('edit_tolov_'))
async def edit_tolov_cb(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id not in ADMINS:
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    old_name = call.data[len('edit_tolov_'):]
    await state.update_data(edit_tolov_old=old_name)
    await call.message.answer(f'Yangi nomini yuboring (eski: {old_name}):')
    await state.set_state('edit_tolov_new')
    await call.answer()

@dp.message_handler(state='edit_tolov_new', content_types=types.ContentTypes.TEXT)
async def edit_tolov_save(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    old_name = data.get('edit_tolov_old')
    new_name = msg.text.strip()
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('UPDATE pay_types SET name=%s WHERE name=%s', (new_name, old_name))
    conn.commit()
    conn.close()
    await msg.answer(f'‚úèÔ∏è To‚Äòlov turi o‚Äòzgartirildi: {old_name} ‚Üí {new_name}')
    await state.finish()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ Kotegoriyalar ---
@dp.message_handler(commands=['del_category'], state='*')
async def del_category_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    kb = InlineKeyboardMarkup(row_width=1)
    for name in get_categories():
        kb.add(InlineKeyboardButton(f'‚ùå {name}', callback_data=f'del_category_{name}'))
    await msg.answer('O‚Äòchirish uchun kategoriya tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('del_category_'))
async def del_category_cb(call: types.CallbackQuery):
    if call.from_user.id not in ADMINS:
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    name = call.data[len('del_category_'):]
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('DELETE FROM categories WHERE name=%s', (name,))
    conn.commit()
    conn.close()
    await call.message.edit_text(f'‚ùå Kategoriya o‚Äòchirildi: {name}')
    await call.answer()

@dp.message_handler(commands=['edit_category'], state='*')
async def edit_category_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    kb = InlineKeyboardMarkup(row_width=1)
    for name in get_categories():
        kb.add(InlineKeyboardButton(f'‚úèÔ∏è {name}', callback_data=f'edit_category_{name}'))
    await msg.answer('Tahrirlash uchun kategoriya tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('edit_category_'))
async def edit_category_cb(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id not in ADMINS:
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    old_name = call.data[len('edit_category_'):]
    await state.update_data(edit_category_old=old_name)
    await call.message.answer(f'Yangi nomini yuboring (eski: {old_name}):')
    await state.set_state('edit_category_new')
    await call.answer()

@dp.message_handler(state='edit_category_new', content_types=types.ContentTypes.TEXT)
async def edit_category_save(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    old_name = data.get('edit_category_old')
    new_name = msg.text.strip()
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('UPDATE categories SET name=%s WHERE name=%s', (new_name, old_name))
    conn.commit()
    conn.close()
    await msg.answer(f'‚úèÔ∏è Kategoriya o‚Äòzgartirildi: {old_name} ‚Üí {new_name}')
    await state.finish()

@dp.message_handler(commands=['debug_db'], state='*')
async def debug_db_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    
    try:
        conn = get_db_conn()
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
        c.execute("SELECT COUNT(*) FROM users")
        users_count = c.fetchone()[0]
        
        c.execute("SELECT user_id, name, phone, status, reg_date FROM users ORDER BY id DESC LIMIT 5")
        recent_users = c.fetchall()
        
        conn.close()
        
        text = f"<b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>\n"
        text += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n\n"
        text += f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
        
        if recent_users:
            for i, (user_id, name, phone, status, reg_date) in enumerate(recent_users, 1):
                text += f"{i}. ID: {user_id}, –ò–º—è: {name}, –°—Ç–∞—Ç—É—Å: {status}\n"
        else:
            text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç\n"
            
        await msg.answer(text)
        
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")

@dp.message_handler(commands=['test_user'], state='*')
async def test_user_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    
    user_id = msg.from_user.id
    user_name = get_user_name(user_id)
    
    text = f"<b>–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ get_user_name:</b>\n"
    text += f"–í–∞—à user_id: {user_id}\n"
    text += f"–†–µ–∑—É–ª—å—Ç–∞—Ç get_user_name: '{user_name}'\n"
    
    if user_name:
        text += "‚úÖ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ"
    else:
        text += "‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ"
    
    await msg.answer(text)

@dp.message_handler(commands=['recreate_db'], state='*')
async def recreate_db_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    
    try:
        conn = get_db_conn()
        c = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É categories
        c.execute('DROP TABLE IF EXISTS categories')
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É categories –±–µ–∑ —Å—Ç–æ–ª–±—Ü–∞ emoji
        c.execute('''CREATE TABLE categories (
            id SERIAL PRIMARY KEY,
            name TEXT UNIQUE
        )''')
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        for name in ["–ú–∏–∂–æ–∑–ª–∞—Ä–¥–∞–Ω", "–ê—Ä–µ–Ω–¥–∞ —Ç–µ—Ö–Ω–∏–∫–∞ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "–ë–µ—Ç–æ–Ω —Ç–∞–π—ë—Ä–ª–∞–± –±–µ—Ä–∏—à", "–ì–µ–æ–ª–æ–≥–∏—è –≤–∞ –ª–æ–π–∏—Ö–∞ –∏—à–ª–∞—Ä–∏", "–ì–µ–æ–ª–æ–≥–∏—è –∏—à–ª–∞—Ä–∏", "–î–∏–∑ —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏", "–î–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", "–ó–∞–ø—Ä–∞–≤–∫–∞", "–ö–æ–º–º—É–Ω–∞–ª –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–ö—É–Ω–ª–∏–∫ –∏—à—á–∏", "–û–±—ä–µ–º —É—Å—Ç–∞–ª–∞—Ä", "–ü–µ—Ä–µ–≤–æ–¥", "–û–π–ª–∏–∫ –∏—à—á–∏–ª–∞—Ä", "–û–ª–∏–± —á–∏–∫–∏–± –∫–µ—Ç–∏–ª–≥–∞–Ω –º—É—Å–æ—Ä", "–ü–µ—Ä–µ—á–µ—Å–ª–µ–Ω–∏—è –†–∞—Å—Ö–æ–¥", "–ü–∏—Ç–∞–Ω–∏–µ", "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã", "–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∑–∞–ø—á–∞—Å—Ç–∏", "–°–æ—Ç–∏–± –æ–ª–∏–Ω–≥–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª", "–ö–∞—Ä–∑", "–°–æ—Ç–∏–± –æ–ª–∏–Ω–≥–∞–Ω —Å–Ω–æ—Å —É–π–ª–∞—Ä", "–í–∞–ª—é—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è", "–•–∏–∑–º–∞—Ç (–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã)", "–•–æ–∑ —Ç–æ–≤–∞—Ä—ã –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", "SXF Kapital", "–•–æ–∂–∏ –ê–∫–∞", "–≠—Ö—Å–æ–Ω", "–•–æ–º–∏–π–ª–∏–∫"]:
            c.execute('INSERT INTO categories (name) VALUES (%s)', (name,))
        
        conn.commit()
        conn.close()
        
        await msg.answer('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞! –¢–∞–±–ª–∏—Ü–∞ categories –æ–±–Ω–æ–≤–ª–µ–Ω–∞.')
        
    except Exception as e:
        await msg.answer(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –ë–î: {e}')

@dp.message_handler(commands=['sync_categories'], state='*')
async def sync_categories_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    
    try:
        conn = get_db_conn()
        c = conn.cursor()
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É categories
        c.execute('DELETE FROM categories')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = [
            "–ú–∏–∂–æ–∑–ª–∞—Ä–¥–∞–Ω",
            "–ê—Ä–µ–Ω–¥–∞ —Ç–µ—Ö–Ω–∏–∫–∞ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
            "–ë–µ—Ç–æ–Ω —Ç–∞–π—ë—Ä–ª–∞–± –±–µ—Ä–∏—à",
            "–ì–µ–æ–ª–æ–≥–∏—è –≤–∞ –ª–æ–π–∏—Ö–∞ –∏—à–ª–∞—Ä–∏",
            "–ì–µ–æ–ª–æ–≥–∏—è –∏—à–ª–∞—Ä–∏",
            "–î–∏–∑ —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏",
            "–î–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
            "–ó–∞–ø—Ä–∞–≤–∫–∞",
            "–ö–æ–º–º—É–Ω–∞–ª –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
            "–ö—É–Ω–ª–∏–∫ –∏—à—á–∏",
            "–û–±—ä–µ–º —É—Å—Ç–∞–ª–∞—Ä",
            "–ü–µ—Ä–µ–≤–æ–¥",
            "–û–π–ª–∏–∫ –∏—à—á–∏–ª–∞—Ä",
            "–û–ª–∏–± —á–∏–∫–∏–± –∫–µ—Ç–∏–ª–≥–∞–Ω –º—É—Å–æ—Ä",
            "–ü–µ—Ä–µ—á–µ—Å–ª–µ–Ω–∏—è –†–∞—Å—Ö–æ–¥",
            "–ü–∏—Ç–∞–Ω–∏–µ",
            "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã",
            "–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∑–∞–ø—á–∞—Å—Ç–∏",
            "–°–æ—Ç–∏–± –æ–ª–∏–Ω–≥–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª",
            "–ö–∞—Ä–∑",
            "–°–æ—Ç–∏–± –æ–ª–∏–Ω–≥–∞–Ω —Å–Ω–æ—Å —É–π–ª–∞—Ä",
            "–í–∞–ª—é—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è",
            "–•–∏–∑–º–∞—Ç (–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã)",
            "–•–æ–∑ —Ç–æ–≤–∞—Ä—ã –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
            "SXF Kapital",
            "–•–æ–∂–∏ –ê–∫–∞",
            "–≠—Ö—Å–æ–Ω",
            "–•–æ–º–∏–π–ª–∏–∫"
        ]
        
        for name in categories:
            c.execute('INSERT INTO categories (name) VALUES (%s)', (name,))
        
        conn.commit()
        conn.close()
        
        await msg.answer('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!')
        
    except Exception as e:
        await msg.answer(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}')

@dp.message_handler(commands=['show_categories'], state='*')
async def show_categories_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    
    try:
        conn = get_db_conn()
        c = conn.cursor()
        
        c.execute('SELECT name FROM categories ORDER BY id')
        categories = c.fetchall()
        conn.close()
        
        if categories:
            text = '<b>–¢–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:</b>\n\n'
            for i, (name,) in enumerate(categories, 1):
                text += f"{i}. {name}\n"
        else:
            text = '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
        
        await msg.answer(text)
        
    except Exception as e:
        await msg.answer(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}')

@dp.message_handler(commands=['load_categories_from_file'], state='*')
async def load_categories_from_file_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    
    try:
        # –ß–∏—Ç–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
        with open('categories.txt', 'r', encoding='utf-8') as f:
            categories = [line.strip() for line in f if line.strip()]
        
        conn = get_db_conn()
        c = conn.cursor()
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É categories
        c.execute('DELETE FROM categories')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
        for name in categories:
            c.execute('INSERT INTO categories (name) VALUES (%s)', (name,))
        
        conn.commit()
        conn.close()
        
        await msg.answer(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ —Ñ–∞–π–ª–∞ categories.txt')
        
    except FileNotFoundError:
        await msg.answer('‚ùå –§–∞–π–ª categories.txt –Ω–µ –Ω–∞–π–¥–µ–Ω')
    except Exception as e:
        await msg.answer(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}')


@dp.message_handler(commands=['all'], state='*')
async def all_cmd(msg: types.Message, state: FSMContext):
    await state.finish()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    has_access, access_type = check_user_access(msg.from_user.id)
    
    if not has_access:
        if access_type == "not_registered":
            text = "‚ùå <b>Ruxsat yo'q!</b>\n\n"
            text += "Siz botdan foydalanish uchun ro'yxatdan o'tishingiz kerak.\n"
            text += "Ro'yxatdan o'tish uchun /register ni bosing"
        elif "blocked" in access_type:
            text = "‚ùå <b>Akkauntiz bloklangan!</b>\n\n"
            text += "Sizning akkauntingiz admin tomonidan bloklangan.\n"
            text += "Batafsil ma'lumot uchun admin bilan bog'laning: @usernamti"
        else:
            text = "‚ùå <b>Xatolik!</b>\n\n"
            text += "Tizimda xatolik yuz berdi. Ro'yxatdan o'tish uchun /register ni bosing"
        
        await msg.answer(text)
        return
    
    try:
        creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(SHEET_ID)
        worksheet = sh.worksheet(SHEET_NAME)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        all_values = worksheet.get_all_values()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ 2-–π —Å—Ç—Ä–æ–∫–∏ (–∏–Ω–¥–µ–∫—Å 1)
        headers = all_values[1] if len(all_values) > 1 else []
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—è —Å 3-–π (–∏–Ω–¥–µ–∫—Å 2)
        data_rows = all_values[2:] if len(all_values) > 2 else []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
        data_rows = [row for row in data_rows if row and row[0]]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "üìä <b>SXF moliyaviy malumot</b>\n\n"
        
        # –°—Ç–æ–ª–±—Ü—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å
        excluded_headers = [
            "Som Kirim",
            "Som chiqim", 
            "Kirim $",
            "Chiqim $",
            "Bank kirim",
            "Bank chiqim"
        ]
        
        for i, row in enumerate(data_rows, 1):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
            text += f"<b>{i}. {row[0] if row[0] else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            for j, cell_value in enumerate(row[1:], 1):  # –Ω–∞—á–∏–Ω–∞—è —Å–æ 2-–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                if cell_value:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                    header = headers[j] if j < len(headers) else f"–°—Ç–æ–ª–±–µ—Ü {j+1}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç —Å—Ç–æ–ª–±–µ—Ü
                    if header not in excluded_headers:
                        text += f"   <b>{header}:</b> {cell_value}\n"
            
            text += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º Umumiy qoldiq
        try:
            # –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —è—á–µ–µ–∫
            d1_value = worksheet.acell('D1').value or '0'
            g1_value = worksheet.acell('G1').value or '0'
            j1_value = worksheet.acell('J1').value or '0'
            m1_value = worksheet.acell('M1').value or '0'
            n1_value = worksheet.acell('N1').value or '0'
            o1_value = worksheet.acell('O1').value or '0'
            
            text += "üí∞ <b>Umumiy qoldiq</b>\n"
            text += f"Ostatka Som : {d1_value}\n"
            text += f"Ostatka $ : {g1_value}\n"
            text += f"Ostatka Bank : {j1_value}\n"
            text += f"Bugungi qarzdorlar : {m1_value}\n"
            text += f"Umumiy Qarzdorlar : {n1_value}\n"
            text += f"Mavjud Obektlar summasi : {o1_value}\n"
            
        except Exception as e:
            text += "‚ùå Umumiy qoldiq ma'lumotlarini olishda xatolik\n"
        
        await msg.answer(text)
        
    except FileNotFoundError:
        await msg.answer("‚ùå –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
    except Exception as e:
        await msg.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets: {e}")


@dp.message_handler(commands=['reboot'], state='*')
async def reboot_cmd(msg: types.Message, state: FSMContext):
    await state.finish()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    has_access, access_type = check_user_access(msg.from_user.id)
    
    if not has_access:
        if access_type == "not_registered":
            text = "‚ùå <b>Ruxsat yo'q!</b>\n\n"
            text += "Siz botdan foydalanish uchun ro'yxatdan o'tishingiz kerak.\n"
            text += "Ro'yxatdan o'tish uchun /register ni bosing"
        elif "blocked" in access_type:
            text = "‚ùå <b>Akkauntiz bloklangan!</b>\n\n"
            text += "Sizning akkauntingiz admin tomonidan bloklangan.\n"
            text += "Batafsil ma'lumot uchun admin bilan bog'laning: @usernamti"
        else:
            text = "‚ùå <b>Xatolik!</b>\n\n"
            text += "Tizimda xatolik yuz berdi. Ro'yxatdan o'tish uchun /register ni bosing"
        
        await msg.answer(text)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboard.add(types.KeyboardButton("üìä Barcha ma'lumotlar"))
    
    text = "üîÑ <b>Bot qayta ishga tushirildi!</b>\n\n"
    text += "Mavjud buyruqlar:\n"
    text += "/all - Barcha ma'lumotlarni ko'rsatish\n"
    text += "/start - Asosiy menyu"
    await msg.answer(text, reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(commands=['add_user'], state='*')
async def add_user_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /add_user user_id name phone
    try:
        parts = msg.text.split(' ', 3)
        if len(parts) < 4:
            await msg.answer('‚ùå Noto\'g\'ri format!\n\n'
                           'Foydalanish: /add_user <user_id> <name> <phone>\n'
                           'Misol: /add_user 123456789 "John Doe" "+998901234567"')
            return
        
        user_id = int(parts[1])
        name = parts[2]
        phone = parts[3]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        conn = get_db_conn()
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        c.execute("SELECT user_id FROM users WHERE user_id = %s", (user_id,))
        if c.fetchone():
            await msg.answer(f'‚ùå Foydalanuvchi {user_id} allaqachon mavjud!')
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        c.execute("""
            INSERT INTO users (user_id, name, phone, status, reg_date) 
            VALUES (%s, %s, %s, 'approved', NOW())
        """, (user_id, name, phone))
        
        conn.commit()
        await msg.answer(f'‚úÖ Foydalanuvchi muvaffaqiyatli qo\'shildi!\n\n'
                        f'ID: {user_id}\n'
                        f'Ism: {name}\n'
                        f'Telefon: {phone}\n'
                        f'Status: approved')
        
    except ValueError:
        await msg.answer('‚ùå User ID raqam bo\'lishi kerak!')
    except Exception as e:
        await msg.answer(f'‚ùå Xatolik: {e}')
    finally:
        if 'conn' in locals():
            conn.close()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
@dp.message_handler(commands=['pending_users'], state='*')
async def pending_users_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    
    await state.finish()
    conn = get_db_conn()
    c = conn.cursor()
    c.execute("SELECT user_id, name, phone, reg_date FROM users WHERE status='pending' ORDER BY reg_date DESC")
    rows = c.fetchall()
    
    if not rows:
        await msg.answer('‚è≥ Hali birorta ham kutilayotgan so\'rov yo\'q.')
        return
    
    text = '<b>‚è≥ Kutilayotgan so\'rovlar:</b>\n\n'
    for i, (user_id, name, phone, reg_date) in enumerate(rows, 1):
        text += f"{i}. <b>{name}</b>\n"
        text += f"   ID: <code>{user_id}</code>\n"
        text += f"   Telefon: <code>{phone}</code>\n"
        text += f"   Sana: {reg_date}\n\n"
    
    await msg.answer(text)

@dp.message_handler(commands=['userslist'], state='*')
async def users_list_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    conn = get_db_conn()
    c = conn.cursor()
    c.execute("SELECT user_id, name, phone, reg_date FROM users WHERE status='approved'")
    rows = c.fetchall()
    conn.close()
    if not rows:
        await msg.answer('Hali birorta ham tasdiqlangan foydalanuvchi yo‚Äòq.')
        return
    text = '<b>Tasdiqlangan foydalanuvchilar:</b>\n'
    for i, (user_id, name, phone, reg_date) in enumerate(rows, 1):
        text += f"\n{i}. <b>{name}</b>\nID: <code>{user_id}</code>\nTelefon: <code>{phone}</code>\nRo‚Äòyxatdan o‚Äòtgan: {reg_date}\n"
    await msg.answer(text)

@dp.message_handler(commands=['block_user'], state='*')
async def block_user_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    conn = get_db_conn()
    c = conn.cursor()
    c.execute("SELECT user_id, name FROM users WHERE status='approved'")
    rows = c.fetchall()
    conn.close()
    if not rows:
        await msg.answer('Hali birorta ham tasdiqlangan foydalanuvchi yo‚Äòq.')
        return
    kb = InlineKeyboardMarkup(row_width=1)
    for user_id, name in rows:
        kb.add(InlineKeyboardButton(f'üö´ {name} ({user_id})', callback_data=f'blockuser_{user_id}'))
    await msg.answer('Bloklash uchun foydalanuvchini tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('blockuser_'))
async def block_user_cb(call: types.CallbackQuery):
    if call.from_user.id not in ADMINS:
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    user_id = int(call.data[len('blockuser_'):])
    update_user_status(user_id, 'denied')
    try:
        await bot.send_message(user_id, '‚ùå Sizga botdan foydalanishga ruxsat berilmagan. (Admin tomonidan bloklandi)')
    except Exception:
        pass
    await call.message.edit_text(f'üö´ Foydalanuvchi bloklandi: {user_id}')
    await call.answer()

@dp.message_handler(commands=['approve_user'], state='*')
async def approve_user_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    conn = get_db_conn()
    c = conn.cursor()
    c.execute("SELECT user_id, name FROM users WHERE status='denied'")
    rows = c.fetchall()
    conn.close()
    if not rows:
        await msg.answer('Hali birorta ham bloklangan foydalanuvchi yo‚Äòq.')
        return
    kb = InlineKeyboardMarkup(row_width=1)
    for user_id, name in rows:
        kb.add(InlineKeyboardButton(f'‚úÖ {name} ({user_id})', callback_data=f'approveuser_{user_id}'))
    await msg.answer('Qayta tasdiqlash uchun foydalanuvchini tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('approveuser_'))
async def approve_user_cb(call: types.CallbackQuery):
    if call.from_user.id not in ADMINS:
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    user_id = int(call.data[len('approveuser_'):])
    update_user_status(user_id, 'approved')
    try:
        await bot.send_message(user_id, '‚úÖ Sizga botdan foydalanishga yana ruxsat berildi! /start')
    except Exception:
        pass
    await call.message.edit_text(f'‚úÖ Foydalanuvchi qayta tasdiqlandi: {user_id}')
    await call.answer()

async def set_user_commands(dp):
    commands = [
        types.BotCommand("start", "Botni boshlash"),
        types.BotCommand("register", "Ro'yxatdan o'tish"),
        types.BotCommand("reboot", "Qayta boshlash - FSM ni to'xtatish"),
        types.BotCommand("all", "Barcha ma'lumotlarni ko'rsatish"),
    ]
    await dp.bot.set_my_commands(commands)

async def notify_all_users(bot):
    conn = get_db_conn()
    c = conn.cursor()
    c.execute("SELECT user_id FROM users WHERE status='approved'")
    rows = c.fetchall()
    conn.close()
    for (user_id,) in rows:
        try:
            await bot.send_message(user_id, "Iltimos, /start ni bosing va botdan foydalanishni davom eting!")
        except Exception:
            pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∏–ª–∏ –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

if __name__ == '__main__':
    from aiogram import executor
    async def on_startup(dp):
        await set_user_commands(dp)
        await notify_all_users(dp.bot)
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup) 
